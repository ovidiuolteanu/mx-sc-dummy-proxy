// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;
use dummy_proxy::dummy_proxy::CallType;

pub struct DummyProxyContractProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for DummyProxyContractProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = DummyProxyContractProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        DummyProxyContractProxyMethods { wrapped_tx: tx }
    }
}

pub struct DummyProxyContractProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> DummyProxyContractProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> DummyProxyContractProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn call_endpoint<
        Arg0: ProxyArg<CallType>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
        Arg2: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg3: ProxyArg<MultiValueEncoded<Env::Api, ManagedBuffer<Env::Api>>>,
    >(
        self,
        call_type: Arg0,
        contract_address: Arg1,
        function_name: Arg2,
        args: Arg3,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("callEndpoint")
            .argument(&call_type)
            .argument(&contract_address)
            .argument(&function_name)
            .argument(&args)
            .original_result()
    }

    pub fn call_int_transfer_endpoint<
        Arg0: ProxyArg<CallType>,
        Arg1: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg2: ProxyArg<u64>,
        Arg3: ProxyArg<BigUint<Env::Api>>,
        Arg4: ProxyArg<ManagedAddress<Env::Api>>,
        Arg5: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg6: ProxyArg<MultiValueEncoded<Env::Api, ManagedBuffer<Env::Api>>>,
    >(
        self,
        call_type: Arg0,
        token_id: Arg1,
        nonce: Arg2,
        amount: Arg3,
        contract_address: Arg4,
        function_name: Arg5,
        args: Arg6,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("callInternalTransferEndpoint")
            .argument(&call_type)
            .argument(&token_id)
            .argument(&nonce)
            .argument(&amount)
            .argument(&contract_address)
            .argument(&function_name)
            .argument(&args)
            .original_result()
    }

    pub fn call_transfer_endpoint<
        Arg0: ProxyArg<CallType>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
        Arg2: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg3: ProxyArg<MultiValueEncoded<Env::Api, ManagedBuffer<Env::Api>>>,
    >(
        self,
        call_type: Arg0,
        contract_address: Arg1,
        function_name: Arg2,
        args: Arg3,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("callTransferEndpoint")
            .argument(&call_type)
            .argument(&contract_address)
            .argument(&function_name)
            .argument(&args)
            .original_result()
    }
}
